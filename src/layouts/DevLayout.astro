---
/**
 * Development Layout Wrapper
 * 
 * This layout provides development-only tools and utilities that help during
 * the development process but are automatically excluded from production builds.
 */
import AccessibilityAuditor from '../components/accessibility/AccessibilityAuditor.astro';

interface Props {
  /**
   * Enable/disable all development tools
   */
  enabled?: boolean;
  /**
   * Show accessibility auditor
   */
  showA11yAuditor?: boolean;
  /**
   * Show performance monitor
   */
  showPerfMonitor?: boolean;
  /**
   * Show debug info
   */
  showDebugInfo?: boolean;
  /**
   * Custom CSS class
   */
  class?: string;
}

const {
  enabled = import.meta.env.DEV,
  showA11yAuditor = true,
  showPerfMonitor = false,
  showDebugInfo = false,
  class: className = "",
} = Astro.props;

// Only show in development mode
const isDev = enabled && import.meta.env.DEV;
---

<!-- Development Tools Wrapper -->
{isDev && (
  <div class={`dev-tools-wrapper ${className}`} data-dev-tools>
    <!-- Accessibility Auditor -->
    {showA11yAuditor && (
      <AccessibilityAuditor 
        showViolations={true}
        showBestPractices={true}
        className="dev-a11y-auditor"
      />
    )}

    <!-- Performance Monitor -->
    {showPerfMonitor && (
      <div id="perf-monitor" class="dev-perf-monitor">
        <div class="perf-indicator">
          <span class="perf-label">FCP</span>
          <span id="fcp-value" class="perf-value">-</span>
        </div>
        <div class="perf-indicator">
          <span class="perf-label">LCP</span>
          <span id="lcp-value" class="perf-value">-</span>
        </div>
      </div>
    )}

    <!-- Debug Info Panel -->
    {showDebugInfo && (
      <div id="debug-info" class="dev-debug-info hidden">
        <div class="debug-header">
          <h3>Debug Info</h3>
          <button type="button" class="debug-close" aria-label="Close debug panel">√ó</button>
        </div>
        <div class="debug-content">
          <div class="debug-section">
            <h4>Environment</h4>
            <ul>
              <li>Mode: <code>{import.meta.env.MODE}</code></li>
              <li>Dev: <code>{import.meta.env.DEV}</code></li>
              <li>Prod: <code>{import.meta.env.PROD}</code></li>
            </ul>
          </div>
        </div>
      </div>
    )}

    <!-- Dev Tools Toggle Button -->
    <button 
      id="dev-tools-toggle" 
      class="dev-tools-toggle"
      title="Toggle Development Tools"
      aria-label="Toggle development tools panel"
    >
      üõ†Ô∏è
    </button>
  </div>
)}

<style>
  .dev-tools-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10000;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
  }

  .dev-tools-toggle {
    position: fixed;
    bottom: 20px;
    left: 20px;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: #1f2937;
    color: white;
    border: none;
    cursor: pointer;
    pointer-events: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .dev-tools-toggle:hover {
    transform: scale(1.05);
    background: #374151;
  }

  .dev-tools-toggle:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Performance Monitor */
  .dev-perf-monitor {
    position: fixed;
    top: 20px;
    right: 20px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 12px;
    border-radius: 8px;
    font-size: 12px;
    pointer-events: auto;
    min-width: 120px;
    backdrop-filter: blur(8px);
  }

  .perf-indicator {
    display: flex;
    justify-content: space-between;
    margin-bottom: 4px;
  }

  .perf-indicator:last-child {
    margin-bottom: 0;
  }

  .perf-label {
    font-weight: 600;
  }

  .perf-value {
    font-family: 'Monaco', 'Menlo', monospace;
    color: #10b981;
  }

  /* Debug Info Panel */
  .dev-debug-info {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    width: 400px;
    max-height: 500px;
    overflow: hidden;
    pointer-events: auto;
    z-index: 10001;
  }

  .debug-header {
    padding: 16px;
    background: #f9fafb;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .debug-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: #374151;
  }

  .debug-close {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: #6b7280;
    padding: 4px;
    border-radius: 4px;
  }

  .debug-close:hover {
    background: #e5e7eb;
    color: #374151;
  }

  .debug-content {
    padding: 16px;
    max-height: 400px;
    overflow-y: auto;
  }

  .debug-section {
    margin-bottom: 16px;
  }

  .debug-section:last-child {
    margin-bottom: 0;
  }

  .debug-section h4 {
    margin: 0 0 8px 0;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
  }

  .debug-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .debug-section li {
    padding: 4px 0;
    font-size: 13px;
    color: #6b7280;
  }

  .debug-section code {
    background: #f3f4f6;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: 'Monaco', 'Menlo', monospace;
    font-size: 12px;
    color: #374151;
  }

  .hidden {
    display: none !important;
  }

  /* Accessibility Auditor positioning adjustment */
  .dev-a11y-auditor {
    /* Override default positioning to avoid conflict with dev tools toggle */
    bottom: 80px !important;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .dev-debug-info {
      background: #1f2937;
      border-color: #374151;
      color: #e5e7eb;
    }

    .debug-header {
      background: #374151;
      border-color: #4b5563;
    }

    .debug-header h3 {
      color: #e5e7eb;
    }

    .debug-close {
      color: #9ca3af;
    }

    .debug-close:hover {
      background: #4b5563;
      color: #e5e7eb;
    }

    .debug-section h4 {
      color: #e5e7eb;
    }

    .debug-section li {
      color: #9ca3af;
    }

    .debug-section code {
      background: #374151;
      color: #e5e7eb;
    }
  }
</style>

<script define:vars={{ showPerfMonitor, showDebugInfo }}>
  if (typeof window !== 'undefined') {
    // Development Tools Manager
    class DevToolsManager {
      constructor() {
        this.init();
      }

      init() {
        this.setupToggle();
        if (showPerfMonitor) {
          this.setupPerformanceMonitor();
        }
        if (showDebugInfo) {
          this.setupDebugInfo();
        }
      }

      setupToggle() {
        const toggle = document.getElementById('dev-tools-toggle');
        if (!toggle) return;

        let panelOpen = false;

        toggle.addEventListener('click', () => {
          panelOpen = !panelOpen;
          
          // Toggle debug info if enabled
          if (showDebugInfo) {
            const debugInfo = document.getElementById('debug-info');
            if (debugInfo) {
              debugInfo.classList.toggle('hidden', !panelOpen);
            }
          }
          
          // Update toggle appearance
          toggle.style.background = panelOpen ? '#3b82f6' : '#1f2937';
        });
      }

      setupPerformanceMonitor() {
        // Monitor Core Web Vitals
        if (typeof PerformanceObserver !== 'undefined') {
          const fcpObserver = new PerformanceObserver((list) => {
            list.getEntries().forEach((entry) => {
              if (entry.name === 'first-contentful-paint') {
                this.updateMetric('fcp-value', `${Math.round(entry.startTime)}ms`);
              }
            });
          });

          const lcpObserver = new PerformanceObserver((list) => {
            list.getEntries().forEach((entry) => {
              this.updateMetric('lcp-value', `${Math.round(entry.startTime)}ms`);
            });
          });

          try {
            fcpObserver.observe({ entryTypes: ['paint'] });
            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
          } catch {
            // Performance Observer not supported
          }
        }
      }

      setupDebugInfo() {
        const closeBtn = document.querySelector('.debug-close');
        if (closeBtn) {
          closeBtn.addEventListener('click', () => {
            const debugInfo = document.getElementById('debug-info');
            if (debugInfo) {
              debugInfo.classList.add('hidden');
            }
          });
        }
      }

      updateMetric(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
          element.textContent = value;
        }
      }
    }

    // Initialize dev tools
    document.addEventListener('DOMContentLoaded', () => {
      new DevToolsManager();
    });

    // Re-initialize on navigation
    document.addEventListener('astro:page-load', () => {
      new DevToolsManager();
    });
  }
</script>