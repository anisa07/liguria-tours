---
/**
 * Simple animation wrapper using Tailwind CSS
 * Replacement for the heavy AnimationProvider component
 *
 * Example usage:
 * <AnimateOnScroll type="fade-in" duration="normal" delay="short">
 *   <div>Content to animate</div>
 * </AnimateOnScroll>
 */

// Animation utility types
type AnimationType =
  | "fade-in"
  | "fade-up"
  | "slide-up"
  | "slide-left"
  | "slide-right";
type AnimationDuration = "fast" | "normal" | "slow";
type AnimationDelay = "none" | "short" | "medium" | "long";

export interface Props {
  type: AnimationType;
  duration?: AnimationDuration;
  delay?: AnimationDelay;
  trigger?: "immediate" | "scroll";
  class?: string;
}

const {
  type,
  duration = "normal",
  delay = "none",
  trigger = "scroll",
  class: className = "",
} = Astro.props;

// Map animation types to CSS classes
const getAnimationClass = (type: AnimationType) => {
  switch (type) {
    case "fade-in":
      return "animate-fade-in";
    case "fade-up":
    case "slide-up":
      return "animate-fade-up";
    case "slide-left":
      return "animate-slide-left";
    default:
      return "animate-fade-up";
  }
};

const getDelayClass = (delay: AnimationDelay) => {
  switch (delay) {
    case "short":
      return "animate-delay-1";
    case "medium":
      return "animate-delay-2";
    case "long":
      return "animate-delay-3";
    default:
      return "";
  }
};

const animationClasses =
  trigger === "scroll"
    ? `${getAnimationClass(type)} ${getDelayClass(delay)}`.trim()
    : "";
---

<div class={`${animationClasses} transition-all ${className}`.trim()}>
  <slot />
</div>

{/* AOS is handled globally via global-animations.ts */}
