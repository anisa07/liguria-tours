---
import { Image } from "astro:assets";
import { getPageTranslations } from "@/i18n/i18n";
import type { Locale } from "@/i18n/config";
import Grid from "@/components/layout/Grid.astro";
import Container from "@/components/layout/Container.astro";

export interface Feature {
  title: string;
  description: string;
  icon?: string;
  image?: string;
  href?: string;
  badge?: string;
  stats?: {
    value: string;
    label: string;
  };
}

export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  features: Feature[];
  columns?: 1 | 2 | 3 | 4;
  variant?: "default" | "cards" | "minimal" | "showcase";
  showBorder?: boolean;
  centerContent?: boolean;
  class?: string;
  locale?: Locale;
}

const {
  title,
  subtitle,
  description,
  features,
  columns = 3,
  variant = "default",
  showBorder = true,
  centerContent = false,
  class: className = "",
  locale = "en",
} = Astro.props;

// Get translations
const { t } = await getPageTranslations(locale, ["features", "common"]);

// Convert columns to responsive grid configuration for Grid component
const getResponsiveConfig = (cols: number) => {
  switch (cols) {
    case 1:
      return { sm: 1, md: 1, lg: 1, xl: 1 };
    case 2:
      return { sm: 1, md: 2, lg: 2, xl: 2 };
    case 4:
      return { sm: 1, md: 2, lg: 4, xl: 4 };
    default: // 3
      return { sm: 1, md: 2, lg: 3, xl: 3 };
  }
};

const getVariantClasses = (variant: string) => {
  switch (variant) {
    case "cards":
      return "bg-background border border-border rounded-lg p-6 hover:shadow-lg transition-all duration-300 hover:border-border-hover";
    case "minimal":
      return "text-center";
    case "showcase":
      return "bg-surface-1 rounded-xl p-8 hover:bg-surface-2 transition-all duration-300";
    default:
      return showBorder
        ? "border-l-4 border-primary/20 pl-6 hover:border-primary/40 transition-all duration-300"
        : "";
  }
};

const sectionClasses = [
  "py-16 md:py-20",
  centerContent ? "text-center" : "",
  className,
]
  .filter(Boolean)
  .join(" ");
---

<section class={sectionClasses}>
  <Container size="xl" padding="responsive">
    <!-- Section Header -->
    {
      (title || subtitle || description) && (
        <div
          class={`mb-12 md:mb-16 ${centerContent ? "text-center max-w-3xl mx-auto" : ""}`}
        >
          {subtitle && (
            <div class="inline-flex items-center px-3 py-1 bg-primary/10 text-primary rounded-full text-sm font-medium mb-4">
              {subtitle}
            </div>
          )}

          {title && (
            <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-foreground mb-4">
              {title}
            </h2>
          )}

          {description && (
            <p class="text-lg text-muted-foreground leading-relaxed">
              {description}
            </p>
          )}
        </div>
      )
    }

    <!-- Features Grid - Now using the Grid component! -->
    <Grid
      cols={1}
      responsive={getResponsiveConfig(columns)}
      gap="lg"
      class="feature-grid"
    >
      {
        features.map((feature, index) => {
          const FeatureWrapper = feature.href ? "a" : "div";
          const wrapperProps = feature.href
            ? {
                href: feature.href,
                class:
                  "block focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded-lg",
              }
            : {};

          return (
            <div
              class={`group relative ${getVariantClasses(variant)}`}
              class={`animate-fade-up ${index > 0 ? `animate-delay-${Math.min(index, 5)}` : ""}`}
            >
              <FeatureWrapper {...wrapperProps}>
                {/* Feature Image */}
                {feature.image && (
                  <div class={`mb-4 ${variant === "showcase" ? "mb-6" : ""}`}>
                    <Image
                      src={feature.image}
                      alt={feature.title}
                      class={`w-full h-48 object-cover rounded-lg ${variant === "cards" || variant === "showcase" ? "" : "rounded-lg"}`}
                      loading="lazy"
                      width={400}
                      height={192}
                    />
                  </div>
                )}

                {/* Feature Icon */}
                {feature.icon && !feature.image && (
                  <div
                    class={`mb-4 ${variant === "minimal" || variant === "showcase" ? "flex justify-center mb-6" : ""}`}
                  >
                    <div
                      class={`inline-flex items-center justify-center rounded-lg ${
                        variant === "showcase"
                          ? "w-16 h-16 bg-primary/10 text-primary text-2xl"
                          : variant === "minimal"
                            ? "w-12 h-12 bg-primary/10 text-primary text-xl"
                            : "w-10 h-10 bg-primary/10 text-primary text-lg"
                      }`}
                    >
                      <span aria-hidden="true">{feature.icon}</span>
                    </div>
                  </div>
                )}

                {/* Feature Badge */}
                {feature.badge && (
                  <div class="absolute top-4 right-4">
                    <span class="inline-flex items-center px-2 py-1 bg-secondary/10 text-secondary rounded-full text-xs font-medium">
                      {feature.badge}
                    </span>
                  </div>
                )}

                {/* Feature Content */}
                <div class="space-y-3">
                  <h3
                    class={`font-semibold text-foreground ${
                      variant === "showcase"
                        ? "text-xl"
                        : variant === "minimal"
                          ? "text-lg"
                          : "text-lg md:text-xl"
                    }`}
                  >
                    {feature.title}
                  </h3>

                  <p
                    class={`text-muted-foreground leading-relaxed ${
                      variant === "showcase" || variant === "cards"
                        ? "text-sm"
                        : "text-sm md:text-base"
                    }`}
                  >
                    {feature.description}
                  </p>

                  {/* Feature Stats */}
                  {feature.stats && (
                    <div class="pt-2">
                      <div class="text-2xl font-bold text-primary">
                        {feature.stats.value}
                      </div>
                      <div class="text-xs text-muted-foreground uppercase tracking-wide">
                        {feature.stats.label}
                      </div>
                    </div>
                  )}

                  {/* Link Indicator */}
                  {feature.href && (
                    <div class="pt-2">
                      <span class="inline-flex items-center text-sm text-primary hover:text-primary/80 transition-colors">
                        {t("features.learn_more", "Learn more")}
                        <span class="ml-1" aria-hidden="true">
                          â†’
                        </span>
                      </span>
                    </div>
                  )}
                </div>
              </FeatureWrapper>
            </div>
          );
        })
      }
    </Grid>

    <!-- Additional Content Slot -->
    <slot name="content" />
  </Container>
</section>

<style>
  /* Animations are now handled via global animations.css */

  /* Hover effects */
  .group:hover .group-hover\:scale-105 {
    transform: scale(1.05);
  }

  /* Focus states */
  .focus\:ring-ring:focus {
    --tw-ring-color: rgb(var(--color-ring) / var(--tw-ring-opacity));
  }

  /* Custom transitions */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>

<!-- AOS is handled globally via global-animations.ts -->
