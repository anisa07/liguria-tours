---
import { Image } from "astro:assets";
import { getPageTranslations } from "@/i18n/i18n";
import type { Locale } from "@/i18n/config";
import { cn } from "@/lib/utils";

export interface BlogPost {
  title: string;
  excerpt: string;
  slug: string;
  publishedAt: string;
  readingTime?: string;
  featuredImage?: string;
  category?: {
    name: string;
    slug: string;
    color?: string;
  };
  author?: {
    name: string;
    avatar?: string;
    slug?: string;
  };
  tags?: string[];
  featured?: boolean;
}

export interface Props {
  post?: BlogPost;
  posts?: BlogPost[];
  variant?: "card" | "horizontal" | "minimal" | "grid";
  showAuthor?: boolean;
  showCategory?: boolean;
  showReadingTime?: boolean;
  showExcerpt?: boolean;
  showTags?: boolean;
  columns?: 1 | 2 | 3 | 4;
  class?: string;
  locale?: Locale;
}

const {
  post,
  posts = [],
  variant = "card",
  showAuthor = true,
  showCategory = true,
  showReadingTime = true,
  showExcerpt = true,
  showTags = false,
  columns = 3,
  class: className = "",
  locale = "en",
} = Astro.props;

// Get translations
const { t } = await getPageTranslations(locale, ["blog", "common"]);

// Use single post or multiple posts
const singlePost = post;
const isMultiplePosts = variant === "grid" && posts.length > 0;

const getGridClasses = (cols: number) => {
  switch (cols) {
    case 1:
      return "grid-cols-1";
    case 2:
      return "grid-cols-1 md:grid-cols-2";
    case 4:
      return "grid-cols-1 md:grid-cols-2 lg:grid-cols-4";
    default:
      return "grid-cols-1 md:grid-cols-2 lg:grid-cols-3";
  }
};

const getCardClasses = (variant: string, featured: boolean = false) => {
  return cn(
    "group relative bg-background border border-border rounded-lg overflow-hidden transition-all duration-300 hover:shadow-lg hover:border-primary/20",
    featured && "ring-2 ring-primary/10"
  );
};

const formatDate = (dateString: string, locale: Locale) => {
  const date = new Date(dateString);
  const localeMap: Record<Locale, string> = {
    en: "en-US",
    nl: "nl-NL",
  };

  return date.toLocaleDateString(localeMap[locale] || "en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

const sectionClasses = cn(isMultiplePosts && "py-16 md:py-20", className);
---

{
  isMultiplePosts ? (
    // Multiple Posts Grid
    <section class={sectionClasses}>
      <div class="container mx-auto px-4">
        <div class={cn("grid gap-6 md:gap-8", getGridClasses(columns))}>
          {posts.map((postItem, index) => (
            <article
              class={`${getCardClasses(variant, postItem.featured)} animate-fade-up ${index > 0 ? `animate-delay-${Math.min(index, 5)}` : ""}`}
            >
              {/* Featured Image */}
              {postItem.featuredImage && (
                <div class="relative aspect-video overflow-hidden">
                  <Image
                    src={postItem.featuredImage}
                    alt={postItem.title}
                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                    loading="lazy"
                    width={400}
                    height={225}
                  />

                  {/* Category Badge */}
                  {showCategory && postItem.category && (
                    <div class="absolute top-4 left-4">
                      <a
                        href={`/categories/${postItem.category.slug}`}
                        class={cn(
                          "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
                          postItem.category.color
                            ? `bg-${postItem.category.color}-100 text-${postItem.category.color}-800`
                            : "bg-primary/10 text-primary"
                        )}
                      >
                        {postItem.category.name}
                      </a>
                    </div>
                  )}

                  {/* Featured Badge */}
                  {postItem.featured && (
                    <div class="absolute top-4 right-4">
                      <span class="inline-flex items-center px-2 py-1 bg-secondary text-secondary-foreground rounded-full text-xs font-medium">
                        {t("blog.featured", "Featured")}
                      </span>
                    </div>
                  )}
                </div>
              )}

              {/* Content */}
              <div class="p-6">
                {/* Category (if no image) */}
                {showCategory &&
                  postItem.category &&
                  !postItem.featuredImage && (
                    <div class="mb-4">
                      <a
                        href={`/categories/${postItem.category.slug}`}
                        class={cn(
                          "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
                          postItem.category.color
                            ? `bg-${postItem.category.color}-100 text-${postItem.category.color}-800`
                            : "bg-primary/10 text-primary"
                        )}
                      >
                        {postItem.category.name}
                      </a>
                    </div>
                  )}

                {/* Title */}
                <h3 class="text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors">
                  <a
                    href={`/blog/${postItem.slug}`}
                    class="focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-sm"
                  >
                    {postItem.title}
                  </a>
                </h3>

                {/* Excerpt */}
                {showExcerpt && (
                  <p class="text-muted-foreground text-sm leading-relaxed mb-4 line-clamp-3">
                    {postItem.excerpt}
                  </p>
                )}

                {/* Tags */}
                {showTags && postItem.tags && postItem.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2 mb-4">
                    {postItem.tags.slice(0, 3).map((tag) => (
                      <span class="inline-flex items-center px-2 py-1 bg-surface-1 text-muted-foreground rounded text-xs">
                        #{tag}
                      </span>
                    ))}
                  </div>
                )}

                {/* Meta */}
                <div class="flex items-center justify-between text-sm text-muted-foreground">
                  <div class="flex items-center space-x-4">
                    {/* Author */}
                    {showAuthor && postItem.author && (
                      <div class="flex items-center space-x-2">
                        {postItem.author.avatar && (
                          <Image
                            src={postItem.author.avatar}
                            alt={postItem.author.name}
                            class="w-6 h-6 rounded-full object-cover"
                            loading="lazy"
                            width={24}
                            height={24}
                          />
                        )}
                        <span>
                          {postItem.author.slug ? (
                            <a
                              href={`/authors/${postItem.author.slug}`}
                              class="hover:text-foreground transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-sm"
                            >
                              {postItem.author.name}
                            </a>
                          ) : (
                            postItem.author.name
                          )}
                        </span>
                      </div>
                    )}

                    {/* Date */}
                    <time datetime={postItem.publishedAt}>
                      {formatDate(postItem.publishedAt, locale)}
                    </time>
                  </div>

                  {/* Reading Time */}
                  {showReadingTime && postItem.readingTime && (
                    <span class="flex items-center">
                      <span class="mr-1" aria-hidden="true">
                        ‚è±
                      </span>
                      {postItem.readingTime} {t("blog.reading_time", "read")}
                    </span>
                  )}
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    </section>
  ) : singlePost ? (
    // Single Post Card
    <article
      class={cn(
        "max-w-md mx-auto",
        getCardClasses(variant, singlePost.featured),
        className
      )}
    >
      {/* Featured Image */}
      {singlePost.featuredImage && (
        <div class="relative aspect-video overflow-hidden">
          <Image
            src={singlePost.featuredImage}
            alt={singlePost.title}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
            width={400}
            height={225}
          />

          {/* Category Badge */}
          {showCategory && singlePost.category && (
            <div class="absolute top-4 left-4">
              <a
                href={`/categories/${singlePost.category.slug}`}
                class={cn(
                  "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
                  singlePost.category.color
                    ? `bg-${singlePost.category.color}-100 text-${singlePost.category.color}-800`
                    : "bg-primary/10 text-primary"
                )}
              >
                {singlePost.category.name}
              </a>
            </div>
          )}

          {/* Featured Badge */}
          {singlePost.featured && (
            <div class="absolute top-4 right-4">
              <span class="inline-flex items-center px-2 py-1 bg-secondary text-secondary-foreground rounded-full text-xs font-medium">
                {t("blog.featured", "Featured")}
              </span>
            </div>
          )}
        </div>
      )}

      {/* Content */}
      <div class="p-6">
        {/* Category (if no image) */}
        {showCategory && singlePost.category && !singlePost.featuredImage && (
          <div class="mb-4">
            <a
              href={`/categories/${singlePost.category.slug}`}
              class={cn(
                "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
                singlePost.category.color
                  ? `bg-${singlePost.category.color}-100 text-${singlePost.category.color}-800`
                  : "bg-primary/10 text-primary"
              )}
            >
              {singlePost.category.name}
            </a>
          </div>
        )}

        {/* Title */}
        <h3 class="text-xl font-semibold text-foreground mb-3 group-hover:text-primary transition-colors">
          <a
            href={`/blog/${singlePost.slug}`}
            class="focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-sm"
          >
            {singlePost.title}
          </a>
        </h3>

        {/* Excerpt */}
        {showExcerpt && (
          <p class="text-muted-foreground text-sm leading-relaxed mb-4">
            {singlePost.excerpt}
          </p>
        )}

        {/* Tags */}
        {showTags && singlePost.tags && singlePost.tags.length > 0 && (
          <div class="flex flex-wrap gap-2 mb-4">
            {singlePost.tags.slice(0, 3).map((tag) => (
              <span class="inline-flex items-center px-2 py-1 bg-surface-1 text-muted-foreground rounded text-xs">
                #{tag}
              </span>
            ))}
          </div>
        )}

        {/* Meta */}
        <div class="flex items-center justify-between text-sm text-muted-foreground">
          <div class="flex items-center space-x-4">
            {/* Author */}
            {showAuthor && singlePost.author && (
              <div class="flex items-center space-x-2">
                {singlePost.author.avatar && (
                  <Image
                    src={singlePost.author.avatar}
                    alt={singlePost.author.name}
                    class="w-6 h-6 rounded-full object-cover"
                    loading="lazy"
                    width={24}
                    height={24}
                  />
                )}
                <span>
                  {singlePost.author.slug ? (
                    <a
                      href={`/authors/${singlePost.author.slug}`}
                      class="hover:text-foreground transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 rounded-sm"
                    >
                      {singlePost.author.name}
                    </a>
                  ) : (
                    singlePost.author.name
                  )}
                </span>
              </div>
            )}

            {/* Date */}
            <time datetime={singlePost.publishedAt}>
              {formatDate(singlePost.publishedAt, locale)}
            </time>
          </div>

          {/* Reading Time */}
          {showReadingTime && singlePost.readingTime && (
            <span class="flex items-center">
              <span class="mr-1" aria-hidden="true">
                ‚è±
              </span>
              {singlePost.readingTime} {t("blog.reading_time", "read")}
            </span>
          )}
        </div>
      </div>
    </article>
  ) : (
    // Placeholder
    <div
      class={cn(
        "max-w-md mx-auto bg-surface-1 border-2 border-dashed border-border rounded-lg p-8 text-center",
        className
      )}
    >
      <div class="text-4xl mb-4" aria-hidden="true">
        üìù
      </div>
      <h3 class="text-lg font-semibold text-foreground mb-2">
        {t("blog.no_posts_available", "No Blog Post Available")}
      </h3>
      <p class="text-muted-foreground">
        {t(
          "blog.add_posts_message",
          "Add a post or posts prop to display blog content."
        )}
      </p>
    </div>
  )
}

<style>
  /* Animations are now handled via global animations.css */

  /* Line clamp for excerpt */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Hover effects */
  .group:hover .group-hover\:scale-105 {
    transform: scale(1.05);
  }

  /* Focus styles */
  .focus\:ring-primary:focus {
    --tw-ring-color: rgb(var(--color-primary) / var(--tw-ring-opacity));
  }
</style>

<!-- Animations are now handled via global animations.css -->
