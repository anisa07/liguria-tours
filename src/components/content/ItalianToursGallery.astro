---
import TourCard from "./TourCard.astro";
import Container from "../layout/Container.astro";
import { getPageTranslations } from "@/i18n/i18n";
import type { Locale } from "@/i18n/config";
import type { CollectionEntry } from "astro:content";

export interface Props {
  locale: Locale;
  italianToursGalleryData?: CollectionEntry<"italianToursGallery">["data"]["tours"];
}

const { locale, italianToursGalleryData } = Astro.props;

// Get the translation function for this component
const { t } = await getPageTranslations(locale, ["common", "ui", "home"]);

// Use italianToursGalleryData directly
const allTours =
  italianToursGalleryData?.map((tour, index) => ({
    id: tour.slug,
    title: tour.title,
    image: tour.images[0]?.image?.src,
    price: tour.price,
    duration: tour.duration,
    href: `/tour/${tour.slug}`,
    category: tour.category,
    isInitiallyVisible: index < 3,
    description: tour.description,
  })) || [];
---

<!-- Italian Tours Gallery -->
<section class="py-20 bg-gradient-to-b from-muted/30 to-background">
  <Container size="xl" padding="lg">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold text-foreground mb-6">
        {t("tours.title", "Авторские туры по Лигурии")}
      </h2>
      <p class="text-xl text-muted-foreground">
        {
          t(
            "tours.description",
            "Откройте для себя самые красивые места Лигурии с гидом"
          )
        }
      </p>
    </div>

    <!-- Tour Filters -->
    <div class="mb-12">
      <div class="flex flex-wrap justify-center gap-4 mb-8">
        <!-- Category Filters -->
        <div class="flex flex-wrap gap-2">
          <button
            class="filter-btn px-4 py-2 rounded-full border border-primary/20 text-sm font-medium transition-all hover:bg-primary hover:text-primary-foreground active bg-primary text-primary-foreground"
            data-filter="all"
          >
            {t("filters.all", "Все туры")}
          </button>
          <button
            class="filter-btn px-4 py-2 rounded-full border border-primary/20 text-sm font-medium transition-all hover:bg-primary hover:text-primary-foreground"
            data-filter="coastal"
          >
            {t("filters.coastal", "Побережье")}
          </button>
          <button
            class="filter-btn px-4 py-2 rounded-full border border-primary/20 text-sm font-medium transition-all hover:bg-primary hover:text-primary-foreground"
            data-filter="city"
          >
            {t("filters.city", "Городские")}
          </button>
          <button
            class="filter-btn px-4 py-2 rounded-full border border-primary/20 text-sm font-medium transition-all hover:bg-primary hover:text-primary-foreground"
            data-filter="cultural"
          >
            {t("filters.cultural", "Культурные")}
          </button>
          <button
            class="filter-btn px-4 py-2 rounded-full border border-primary/20 text-sm font-medium transition-all hover:bg-primary hover:text-primary-foreground"
            data-filter="history"
          >
            {t("filters.history", "Исторические")}
          </button>
        </div>
      </div>
    </div>

    <div
      class="grid md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 gap-6"
      id="tours-grid"
    >
      {
        allTours.map((tour) => (
          <div
            class={`tour-item h-full ${!tour.isInitiallyVisible ? "hidden load-more-item" : ""}`}
            data-category={tour.category}
            style={!tour.isInitiallyVisible ? "display: none;" : ""}
          >
            <TourCard
              tour={{
                ...tour,
                price: tour.price || "По запросу",
                duration: tour.duration || "По запросу",
              }}
            />
          </div>
        ))
      }
    </div>

    <!-- Load More Tours -->
    <div class="text-center mt-12">
      <button
        id="load-more-btn"
        class="inline-flex items-center justify-center px-6 py-3 bg-primary text-primary-foreground rounded-full font-semibold text-lg hover:bg-primary/90 transition-colors shadow-lg hover:shadow-xl"
      >
        <span id="load-more-text"
          >{t("tours.load_more", "Показать больше туров")}</span
        >
        <span class="ml-2">+</span>
      </button>
      <div id="loading-spinner" class="hidden mt-4">
        <div class="inline-flex items-center gap-2 text-muted-foreground">
          <div
            class="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"
          >
          </div>
          <span>{t("tours.loading", "Загрузка...")}</span>
        </div>
      </div>
    </div>
  </Container>
</section>

<script>
  // Tour Filter Functionality and Load More
  document.addEventListener("DOMContentLoaded", function () {
    const filterButtons = document.querySelectorAll(".filter-btn");
    let tourItems = document.querySelectorAll(".tour-item");
    const loadMoreBtn = document.getElementById("load-more-btn");
    const loadingSpinner = document.getElementById("loading-spinner");
    const loadMoreText = document.getElementById("load-more-text");

    let additionalToursVisible = false;

    // Load More Tours functionality - toggle visibility of hidden tours
    loadMoreBtn?.addEventListener("click", function () {
      if (additionalToursVisible) return;

      // Show loading state briefly for UX feedback
      loadingSpinner!.classList.remove("hidden");
      loadMoreBtn!.style.opacity = "0.5";
      loadMoreBtn!.style.pointerEvents = "none";

      // Get current active filter
      const currentActiveBtn = document.querySelector(".filter-btn.active");
      const currentFilter =
        currentActiveBtn?.getAttribute("data-filter") || "all";

      // Show all hidden tours with staggered animation
      const hiddenTours = document.querySelectorAll(".load-more-item");
      const visibleHiddenTours: HTMLElement[] = [];

      hiddenTours.forEach((tourElement) => {
        const htmlTour = tourElement as HTMLElement;
        htmlTour.classList.remove("hidden");
        htmlTour.style.display = "block"; // Override the inline style

        // Apply current filter to newly shown tours
        const category = htmlTour.getAttribute("data-category");

        let shouldShow = false;
        if (currentFilter === "all") {
          shouldShow = true;
        } else if (
          currentFilter === "coastal" ||
          currentFilter === "city" ||
          currentFilter === "cultural" ||
          currentFilter === "history"
        ) {
          shouldShow = category === currentFilter;
        }

        if (shouldShow) {
          // Prepare for animation
          htmlTour.classList.add("fade-in");
          visibleHiddenTours.push(htmlTour);
        } else {
          htmlTour.style.display = "none";
        }
      });

      // Animate visible tours with staggered timing
      visibleHiddenTours.forEach((tour, index) => {
        setTimeout(() => {
          tour.classList.add("fade-in-visible");
        }, index * 150); // 150ms stagger between each card
      });

      // Update tour items list for filtering
      tourItems = document.querySelectorAll(".tour-item");
      additionalToursVisible = true;

      // Hide loading and update button after animation completes
      setTimeout(
        () => {
          loadingSpinner!.classList.add("hidden");
          loadMoreText!.textContent = "Все туры загружены";
          loadMoreBtn!.style.opacity = "1";
          loadMoreBtn!.style.pointerEvents = "auto";
          loadMoreBtn!.classList.add("opacity-50", "cursor-not-allowed");
        },
        visibleHiddenTours.length * 150 + 300
      ); // Wait for all animations plus buffer
    });

    // Filter functionality
    function applyFilter() {
      filterButtons.forEach((button) => {
        button.addEventListener("click", function (this: HTMLElement) {
          const filter = this.getAttribute("data-filter");
          const currentActive = document.querySelector(".filter-btn.active");

          // Don't process if same button is clicked
          if (currentActive === this) return;

          // Update active button
          filterButtons.forEach((btn) =>
            btn.classList.remove(
              "active",
              "bg-primary",
              "text-primary-foreground"
            )
          );
          this.classList.add("active", "bg-primary", "text-primary-foreground");

          // Filter and show/hide items instantly
          tourItems.forEach((item) => {
            const htmlItem = item as HTMLElement;
            const category = item.getAttribute("data-category");

            let shouldShow = false;

            if (filter === "all") {
              shouldShow = true;
            } else if (
              filter === "coastal" ||
              filter === "city" ||
              filter === "cultural" ||
              filter === "history"
            ) {
              shouldShow = category === filter;
            }

            // Clear any inline styles and show/hide instantly
            htmlItem.style.transition = "";
            htmlItem.style.opacity = "";
            htmlItem.style.transform = "";

            // Show items that match the filter
            if (shouldShow) {
              htmlItem.style.display = "block";
              htmlItem.classList.remove("hidden");
            } else {
              htmlItem.style.display = "none";
            }
          });

          // If no initially visible tours match the filter, show some load-more items
          if (filter !== "all") {
            const visibleTours = Array.from(tourItems).filter((item) => {
              const htmlItem = item as HTMLElement;
              return htmlItem.style.display === "block";
            });

            // If no tours are visible, show the first 1 matching tour from load-more items
            if (visibleTours.length === 0) {
              let shownCount = 0;
              tourItems.forEach((item) => {
                const htmlItem = item as HTMLElement;
                const category = item.getAttribute("data-category");
                const isLoadMoreItem =
                  htmlItem.classList.contains("load-more-item");

                if (shownCount < 1 && isLoadMoreItem && category === filter) {
                  htmlItem.style.display = "block";
                  htmlItem.classList.remove("hidden");
                  shownCount++;
                }
              });
            }
          }
        });
      });
    }

    // Initialize filter functionality
    applyFilter();
  });
</script>

<style>
  .filter-btn {
    transition: all 0.2s ease;
  }
  .filter-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  .filter-btn.active {
    transform: none !important;
  }

  .tour-item {
    display: flex;
    height: 100%;
    transition:
      opacity 0.6s ease-in-out,
      transform 0.6s ease-in-out;
  }

  .tour-item.fade-in {
    opacity: 0;
    transform: translateY(20px);
  }

  .tour-item.fade-in-visible {
    opacity: 1;
    transform: translateY(0);
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
