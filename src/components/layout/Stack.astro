---
export interface Props {
  space?: "none" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "4xl";
  align?: "start" | "center" | "end" | "stretch";
  justify?: "start" | "center" | "end" | "between" | "around" | "evenly";
  reverse?: boolean;
  wrap?: boolean;
  divider?: boolean;
  dividerColor?: "primary" | "secondary" | "accent" | "neutral" | "muted";
  responsive?: {
    sm?: Props["space"];
    md?: Props["space"];
    lg?: Props["space"];
    xl?: Props["space"];
  };
  as?:
    | "div"
    | "section"
    | "main"
    | "article"
    | "aside"
    | "ul"
    | "ol"
    | "nav"
    | "header"
    | "footer";
  class?: string;
}

const {
  space = "md",
  align = "stretch",
  justify = "start",
  reverse = false,
  wrap = false,
  divider = false,
  dividerColor = "neutral",
  responsive,
  as: Element = "div",
  class: className = "",
} = Astro.props;

const getSpaceClasses = (
  space: Props["space"],
  responsive?: Props["responsive"]
) => {
  let classes: string[] = [];

  // Base spacing
  switch (space) {
    case "none":
      classes.push("space-y-0");
      break;
    case "xs":
      classes.push("space-y-1");
      break;
    case "sm":
      classes.push("space-y-2");
      break;
    case "md":
      classes.push("space-y-4");
      break;
    case "lg":
      classes.push("space-y-6");
      break;
    case "xl":
      classes.push("space-y-8");
      break;
    case "2xl":
      classes.push("space-y-12");
      break;
    case "3xl":
      classes.push("space-y-16");
      break;
    case "4xl":
      classes.push("space-y-24");
      break;
  }

  // Responsive spacing
  if (responsive) {
    if (responsive.sm) {
      switch (responsive.sm) {
        case "none":
          classes.push("sm:space-y-0");
          break;
        case "xs":
          classes.push("sm:space-y-1");
          break;
        case "sm":
          classes.push("sm:space-y-2");
          break;
        case "md":
          classes.push("sm:space-y-4");
          break;
        case "lg":
          classes.push("sm:space-y-6");
          break;
        case "xl":
          classes.push("sm:space-y-8");
          break;
        case "2xl":
          classes.push("sm:space-y-12");
          break;
        case "3xl":
          classes.push("sm:space-y-16");
          break;
        case "4xl":
          classes.push("sm:space-y-24");
          break;
      }
    }

    if (responsive.md) {
      switch (responsive.md) {
        case "none":
          classes.push("md:space-y-0");
          break;
        case "xs":
          classes.push("md:space-y-1");
          break;
        case "sm":
          classes.push("md:space-y-2");
          break;
        case "md":
          classes.push("md:space-y-4");
          break;
        case "lg":
          classes.push("md:space-y-6");
          break;
        case "xl":
          classes.push("md:space-y-8");
          break;
        case "2xl":
          classes.push("md:space-y-12");
          break;
        case "3xl":
          classes.push("md:space-y-16");
          break;
        case "4xl":
          classes.push("md:space-y-24");
          break;
      }
    }

    if (responsive.lg) {
      switch (responsive.lg) {
        case "none":
          classes.push("lg:space-y-0");
          break;
        case "xs":
          classes.push("lg:space-y-1");
          break;
        case "sm":
          classes.push("lg:space-y-2");
          break;
        case "md":
          classes.push("lg:space-y-4");
          break;
        case "lg":
          classes.push("lg:space-y-6");
          break;
        case "xl":
          classes.push("lg:space-y-8");
          break;
        case "2xl":
          classes.push("lg:space-y-12");
          break;
        case "3xl":
          classes.push("lg:space-y-16");
          break;
        case "4xl":
          classes.push("lg:space-y-24");
          break;
      }
    }

    if (responsive.xl) {
      switch (responsive.xl) {
        case "none":
          classes.push("xl:space-y-0");
          break;
        case "xs":
          classes.push("xl:space-y-1");
          break;
        case "sm":
          classes.push("xl:space-y-2");
          break;
        case "md":
          classes.push("xl:space-y-4");
          break;
        case "lg":
          classes.push("xl:space-y-6");
          break;
        case "xl":
          classes.push("xl:space-y-8");
          break;
        case "2xl":
          classes.push("xl:space-y-12");
          break;
        case "3xl":
          classes.push("xl:space-y-16");
          break;
        case "4xl":
          classes.push("xl:space-y-24");
          break;
      }
    }
  }

  return classes;
};

const getFlexClasses = (
  align: string,
  justify: string,
  reverse: boolean,
  wrap: boolean
) => {
  let classes: string[] = ["flex", "flex-col"];

  // Direction
  if (reverse) {
    classes.push("flex-col-reverse");
    classes = classes.filter((c) => c !== "flex-col");
  }

  // Wrap
  if (wrap) {
    classes.push("flex-wrap");
  }

  // Align items
  switch (align) {
    case "start":
      classes.push("items-start");
      break;
    case "center":
      classes.push("items-center");
      break;
    case "end":
      classes.push("items-end");
      break;
    case "stretch":
      classes.push("items-stretch");
      break;
  }

  // Justify content
  switch (justify) {
    case "start":
      classes.push("justify-start");
      break;
    case "center":
      classes.push("justify-center");
      break;
    case "end":
      classes.push("justify-end");
      break;
    case "between":
      classes.push("justify-between");
      break;
    case "around":
      classes.push("justify-around");
      break;
    case "evenly":
      classes.push("justify-evenly");
      break;
  }

  return classes;
};

const getDividerClasses = (divider: boolean, dividerColor: string) => {
  if (!divider) return [];

  const colorClasses: Record<string, string> = {
    primary: "divide-primary",
    secondary: "divide-secondary",
    accent: "divide-accent",
    neutral: "divide-border",
    muted: "divide-muted",
  };

  return ["divide-y", colorClasses[dividerColor] || "divide-border"];
};

const stackClasses = [
  ...getFlexClasses(align, justify, reverse, wrap),
  ...getSpaceClasses(space, responsive),
  ...getDividerClasses(divider, dividerColor),
  className,
]
  .filter(Boolean)
  .join(" ");
---

<Element class={stackClasses}>
  <slot />
</Element>

<style>
  /* Additional divider color options using semantic color tokens */
  .divide-primary > :not([hidden]) ~ :not([hidden]) {
    border-top-color: hsl(var(--primary));
  }

  .divide-secondary > :not([hidden]) ~ :not([hidden]) {
    border-top-color: hsl(var(--secondary));
  }

  .divide-accent > :not([hidden]) ~ :not([hidden]) {
    border-top-color: hsl(var(--accent));
  }

  .divide-border > :not([hidden]) ~ :not([hidden]) {
    border-top-color: hsl(var(--border));
  }

  .divide-muted > :not([hidden]) ~ :not([hidden]) {
    border-top-color: hsl(var(--muted));
  }
</style>
