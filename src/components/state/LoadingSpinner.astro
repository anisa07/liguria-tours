---
import type { HTMLAttributes } from "astro/types";
import { cn } from "@/lib/utils";
import { Loader2 } from "lucide-react";

interface Props extends HTMLAttributes<"div"> {
  size?: "xs" | "sm" | "md" | "lg" | "xl";
  variant?: "spin" | "dots" | "pulse" | "bounce" | "bars" | "ring";
  color?: "primary" | "secondary" | "success" | "warning" | "error" | "neutral";
  speed?: "slow" | "normal" | "fast";
  label?: string;
  showLabel?: boolean;
}

const {
  size = "md",
  variant = "spin",
  color = "primary",
  speed = "normal",
  label = "Loading...",
  showLabel = false,
  class: className = "",
  ...rest
} = Astro.props;

// Size classes
const sizeClasses = {
  xs: "w-3 h-3",
  sm: "w-4 h-4",
  md: "w-6 h-6",
  lg: "w-8 h-8",
  xl: "w-12 h-12",
};

const labelSizeClasses = {
  xs: "text-xs",
  sm: "text-sm",
  md: "text-base",
  lg: "text-lg",
  xl: "text-xl",
};

// Color classes using CSS variables
const getColorClasses = (color: string) => {
  switch (color) {
    case "secondary":
      return "text-muted-foreground";
    case "success":
      return "text-success";
    case "warning":
      return "text-warning";
    case "error":
      return "text-destructive";
    case "neutral":
      return "text-muted-foreground";
    default:
      return "text-primary";
  }
};

// Speed classes
const getSpeedClasses = (speed: string) => {
  switch (speed) {
    case "slow":
      return "animate-spin-slow";
    case "fast":
      return "animate-spin-fast";
    default:
      return "animate-spin";
  }
};

// Spinner variants
const renderSpinner = (
  variant: string,
  sizeClass: string,
  colorClass: string,
  speedClass: string
) => {
  switch (variant) {
    case "dots":
      return `
        <div class="flex space-x-1">
          <div class="${sizeClass} ${colorClass} bg-current rounded-full animate-bounce" style="animation-delay: 0ms;"></div>
          <div class="${sizeClass} ${colorClass} bg-current rounded-full animate-bounce" style="animation-delay: 150ms;"></div>
          <div class="${sizeClass} ${colorClass} bg-current rounded-full animate-bounce" style="animation-delay: 300ms;"></div>
        </div>
      `;

    case "pulse":
      return `
        <div class="${sizeClass} ${colorClass} bg-current rounded-full animate-pulse"></div>
      `;

    case "bounce":
      return `
        <div class="${sizeClass} ${colorClass} bg-current rounded animate-bounce"></div>
      `;

    case "bars":
      return `
        <div class="flex items-end space-x-0.5">
          <div class="w-1 ${sizeClass.includes("h-3") ? "h-3" : sizeClass.includes("h-4") ? "h-4" : sizeClass.includes("h-6") ? "h-6" : sizeClass.includes("h-8") ? "h-8" : "h-12"} ${colorClass} bg-current animate-pulse" style="animation-delay: 0ms;"></div>
          <div class="w-1 ${sizeClass.includes("h-3") ? "h-4" : sizeClass.includes("h-4") ? "h-5" : sizeClass.includes("h-6") ? "h-7" : sizeClass.includes("h-8") ? "h-9" : "h-14"} ${colorClass} bg-current animate-pulse" style="animation-delay: 150ms;"></div>
          <div class="w-1 ${sizeClass.includes("h-3") ? "h-3" : sizeClass.includes("h-4") ? "h-4" : sizeClass.includes("h-6") ? "h-6" : sizeClass.includes("h-8") ? "h-8" : "h-12"} ${colorClass} bg-current animate-pulse" style="animation-delay: 300ms;"></div>
        </div>
      `;

    case "ring":
      return `
        <div class="${sizeClass} border-2 border-border border-t-current ${colorClass} rounded-full ${speedClass}"></div>
      `;

    default: // spin
      return null; // Will be rendered as Lucide component below
  }
};

// Check if we need to render Lucide icon for spin variant
const shouldRenderLucideIcon = variant === "spin";

const spinnerHTML = shouldRenderLucideIcon
  ? null
  : renderSpinner(
      variant,
      sizeClasses[size],
      getColorClasses(color),
      getSpeedClasses(speed)
    );
---

<div
  class={cn("inline-flex items-center", showLabel && "space-x-2", className)}
  role="status"
  aria-live="polite"
  aria-label={label}
  {...rest}
>
  <!-- Spinner -->
  {
    shouldRenderLucideIcon ? (
      <Loader2
        className={cn(
          sizeClasses[size],
          getColorClasses(color),
          getSpeedClasses(speed)
        )}
      />
    ) : (
      <Fragment set:html={spinnerHTML} />
    )
  }

  <!-- Label -->
  {
    showLabel && (
      <span
        class={cn(
          labelSizeClasses[size],
          getColorClasses(color),
          "font-medium"
        )}
      >
        {label}
      </span>
    )
  }

  <!-- Screen reader text -->
  <span class="sr-only">
    {label}
  </span>
</div>

<style>
  /* Custom animation speeds */
  .animate-spin-slow {
    animation: spin 3s linear infinite;
  }

  .animate-spin-fast {
    animation: spin 0.5s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Staggered animation for dots and bars */
  .animate-bounce {
    animation: bounce 1.4s ease-in-out infinite both;
  }

  @keyframes bounce {
    0%,
    80%,
    100% {
      transform: scale(0);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Pulse animation variations */
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    [role="status"] {
      border: 1px solid;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .animate-spin,
    .animate-spin-slow,
    .animate-spin-fast,
    .animate-bounce,
    .animate-pulse {
      animation: none;
    }

    /* Show a simple static indicator instead */
    .animate-spin::after {
      content: "‚è≥";
      font-size: inherit;
    }
  }
</style>
