---
import IntlBaseLayout from "@/layouts/IntlBaseLayout.astro";
import Container from "@/components/layout/Container.astro";
import Section from "@/components/layout/Section.astro";
import { getPageTranslations } from "@/i18n/i18n";
import type { Locale } from "@/i18n/config";
import { getCollection } from "astro:content";

export interface Props {
  locale: Locale;
}

// Get params from URL
const { slug } = Astro.params;

// Get locale from URL
const pathSegments = Astro.url.pathname.split("/").filter(Boolean);
const locale = (pathSegments[0] as Locale) || "ru";

// Get the translation function for this page
const { t } = await getPageTranslations(locale, ["common", "ui", "tours"]);

// Load tours from content collection
const toursCollection = await getCollection("italianToursGallery");
const toursData = toursCollection && toursCollection[0]?.data;
const allTours = toursData?.tours || [];

// Find the tour by slug
const tour = allTours.find((t) => t.slug === slug);

// If tour not found, return 404
if (!tour) {
  return Astro.redirect("/404");
}

// Static paths generation for pre-rendering
export async function getStaticPaths() {
  const toursCollection = await getCollection("italianToursGallery");
  const toursData = toursCollection && toursCollection[0]?.data;
  const tours = toursData?.tours || [];

  const locales = ["ru"];

  const paths = [];

  for (const locale of locales) {
    for (const tour of tours) {
      paths.push({
        params: { slug: tour.slug },
        props: { locale },
      });
    }
  }

  return paths;
}
---

<IntlBaseLayout
  title={`${tour.title} - ${t("tours.title", "Туры по Италии")}`}
  description={tour.description}
  locale={locale}
>
  <Section class="py-12">
    <Container>
      <!-- Back Button -->
      <div class="mb-8">
        <button
          onclick="history.back()"
          class="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors"
        >
          <svg
            class="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          {t("common.back", "Назад")}
        </button>
      </div>

      <!-- Title -->
      <div class="mb-12">
        <h1 class="text-3xl md:text-4xl font-bold text-center">{tour.title}</h1>
      </div>

      <!-- Tour Content -->
      <div class="grid lg:grid-cols-2 gap-12">
        <!-- Images Section -->
        <div>
          <!-- Main Image -->
          <div class="aspect-[4/3] rounded-2xl overflow-hidden mb-4">
            <img
              src={tour.images[0]?.image?.src}
              alt={tour.title}
              class="w-full h-full object-cover"
            />
          </div>

          <!-- Small Images -->
          {
            tour.images && tour.images.length > 1 && (
              <div class="grid grid-cols-2 gap-4">
                {tour.images.slice(1, 3).map((imageObj, index) => (
                  <div class="aspect-[4/3] rounded-lg overflow-hidden">
                    <img
                      src={imageObj.image.src}
                      alt={imageObj.alt || `${tour.title} ${index + 2}`}
                      class="w-full h-full object-cover hover:scale-105 transition-transform cursor-pointer"
                    />
                  </div>
                ))}
              </div>
            )
          }
        </div>

        <!-- Content Section -->
        <div class="space-y-8">
          <!-- Price and Duration -->
          <div class="flex flex-wrap gap-6">
            {
              tour.duration && (
                <div class="flex items-center gap-2">
                  <span class="text-sm text-muted-foreground">
                    {t("tours.duration", "Продолжительность")}:
                  </span>
                  <span class="font-semibold">{tour.duration}</span>
                </div>
              )
            }
          </div>

          <!-- Book Now Button -->
          <div class="pt-4">
            <a
              href="/about-me"
              class="inline-block bg-primary hover:bg-primary/90 text-primary-foreground px-6 py-3 rounded-full font-semibold text-lg transition-colors"
            >
              {t("tours.book_now", "Забронировать")}
            </a>
          </div>
        </div>
      </div>

      <!-- Description Section - Full Width -->
      <div class="mt-16">
        <div class="max-w-4xl mx-auto">
          <p class="text-muted-foreground leading-relaxed text-lg text-justify">
            {tour.fullDescription}
          </p>
        </div>
      </div>

      <!-- Highlights Section - Full Width Below in Columns -->
      {
        tour.points && tour.points.length > 0 && (
          <div class="mt-16">
            <h3 class="text-2xl font-bold mb-8 text-center">
              {t("tours.highlights", "Основные моменты")}
            </h3>
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {tour.points.map((point) => (
                <div class="flex items-start gap-3 p-4 bg-muted/30 rounded-lg">
                  <svg
                    class="w-5 h-5 text-primary mt-0.5 flex-shrink-0"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                  <span class="text-muted-foreground">{point}</span>
                </div>
              ))}
            </div>
          </div>
        )
      }
    </Container>
  </Section>
</IntlBaseLayout>
